plugins {
    id 'java' // 應用 Java 插件
    id 'application' // 應用 Application 插件以便執行
    id 'org.openjfx.javafxplugin' version '0.0.13' // 添加JavaFX插件
    id 'org.beryx.jlink' version '2.26.0' // 添加jlink插件用於創建自定義運行時
}

repositories {
    mavenCentral() // 使用 Maven 中央倉庫
}

// 配置JavaFX
javafx {
    version = '17.0.15' // 嘗試用回 JavaFX 17 的最新版
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.swing']
    // Classifier logic removed - handled by plugin or dependencies
}

dependencies {
    // Add JSON library (Needed for Places API response parsing)
    implementation 'org.json:json:20240303' 

    // Add Emoji library for handling emoji codes in reviews
    implementation 'com.vdurmont:emoji-java:5.1.1' // Or latest version

    // 測試函式庫 (可選，但建議加入)
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

application {
    // 指定包含 main 方法的主類別
    mainClass = 'bigproject.compare'  // 取消註解並設定為主要類別
    // mainClass = 'bigproject.MinimalTest' // 註解掉測試類別
    // 添加 JVM 參數
    applicationDefaultJvmArgs = [
       // '-Dprism.verbose=true', 
       // '-Djavafx.verbose=true',
       // '-Dprism.order=sw' // Keep software rendering if needed, remove otherwise
       // 添加所有需要的模塊
       '--add-modules', 'java.net.http,java.prefs,javafx.controls,javafx.fxml,javafx.swing',
       // 添加自動模塊和第三方庫的訪問權限
       '--add-modules', 'ALL-MODULE-PATH',
       // 打開模塊邊界
       '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
       '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
       '--add-exports', 'javafx.swing/javafx.embed.swing=ALL-UNNAMED',
       // 禁用模塊系統的限制
       '--illegal-access=permit',
       // 運行時允許使用未命名模塊
       '-Xmx1g', // 設置最大堆內存為1GB
       '-Dapple.awt.application.name=Restaurant Analyzer' // 設置macOS應用名稱
    ]
}

// 添加應用程式信息
ext {
    appName = "Restaurant Analyzer"
    appVersion = "1.0.0"
    appVendor = "Restaurant Analyzer Team"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8' // 設定 Java 編譯器使用 UTF-8 編碼
    // 使用 --release 選項來統一設定 Java 版本並禁用預覽
    options.compilerArgs = [
        '--release', '21',
        // 關閉模塊系統檢查
        '--patch-module', 'bigproject=./lib/json-20240303.jar:./lib/emoji-java-5.1.1.jar',
        // 添加模塊導出和開放
        '--add-exports', 'javafx.swing/javafx.embed.swing=bigproject',
        '--add-opens', 'javafx.graphics/javafx.scene=bigproject'
    ]
}

tasks.named('test') {
    useJUnitPlatform() // 設定測試使用 JUnit Platform
}

// jlink配置 - 創建自定義運行時映像
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    
    launcher {
        name = 'Restaurant Analyzer'
        jvmArgs = [
            // 添加所有需要的模塊
            '--add-modules', 'java.net.http,java.prefs,javafx.controls,javafx.fxml,javafx.swing', 
            // 添加自動模塊和第三方庫的訪問權限
            '--add-modules', 'ALL-MODULE-PATH',
            // 打開模塊邊界
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
            '--add-exports', 'javafx.swing/javafx.embed.swing=ALL-UNNAMED',
            // 禁用模塊系統的限制
            '--illegal-access=permit',
            '-Xmx1g', 
            '-Dapple.awt.application.name=Restaurant Analyzer'
        ]
    }
    
    jpackage {
        // 基本設定
        appName = project.ext.appName
        appVersion = project.ext.appVersion
        vendor = project.ext.appVendor
        
        // 圖標設定
        icon = "src/main/resources/icons/restaurant_icon.png"
        
        // macOS特定設定
        if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            jvmArgs = [
                '--add-modules', 'java.net.http,java.prefs,javafx.controls,javafx.fxml,javafx.swing',
                '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                '--add-opens', 'javafx.graphics/javafx.scene=ALL-UNNAMED',
                '-Xmx1g', 
                '-Dapple.awt.application.name=Restaurant Analyzer',
                '-Dapple.laf.useScreenMenuBar=true'
            ]
            
            // macOS打包選項
            installerOptions = [
                '--mac-package-name', 'Restaurant Analyzer',
                '--mac-package-identifier', 'com.restaurantanalyzer.app',
                '--resource-dir', 'src/main/resources',
                '--mac-sign'
            ]
        }
        
        // Windows特定設定
        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
            installerOptions = [
                '--win-menu',
                '--win-shortcut',
                '--win-dir-chooser',
                '--win-per-user-install'
            ]
        }
    }
}

// 創建一個任務來更新啟動腳本中的應用程式名稱
task updateStartScripts {
    doLast {
        File windowsScriptFile = new File("${buildDir}/scripts/Restaurant Analyzer.bat")
        File unixScriptFile = new File("${buildDir}/scripts/Restaurant Analyzer")
        
        // 確保目錄存在
        windowsScriptFile.parentFile.mkdirs()
        unixScriptFile.parentFile.mkdirs()
        
        // 創建啟動腳本
        if (!windowsScriptFile.exists()) {
            windowsScriptFile << '@echo off\r\n'
            windowsScriptFile << 'start "Restaurant Analyzer" /B javaw -jar "%~dp0\\..\\lib\\bigproject.jar"\r\n'
        }
        
        if (!unixScriptFile.exists()) {
            unixScriptFile << '#!/bin/sh\n'
            unixScriptFile << 'java -jar "$(dirname "$0")/../lib/bigproject.jar"\n'
            unixScriptFile.setExecutable(true)
        }
    }
}

// 創建一個簡單的任務來生成macOS應用程式包
task createMacApp(dependsOn: 'jpackage') {
    group = 'build'
    description = '建立macOS應用程式包'
}

// 創建一個簡單的任務來生成Windows應用程式包
task createWindowsApp(dependsOn: 'jpackage') {
    group = 'build'
    description = '建立Windows應用程式包'
} 